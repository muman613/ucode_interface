/* autogenerated with parsecfg: do not edit. */

union bvp_lib_colorspace_conversion_alphaReg {
 struct { uint32_t

 /* sorting 3 */
#define bvp_lib_colorspace_conversion_alpha_alpha0_SHIFT 0
#define bvp_lib_colorspace_conversion_alpha_alpha0_WIDTH 8
#define bvp_lib_colorspace_conversion_alpha_alpha1_SHIFT 8
#define bvp_lib_colorspace_conversion_alpha_alpha1_WIDTH 8
#define bvp_lib_colorspace_conversion_alpha_fading_enable_SHIFT 16
#define bvp_lib_colorspace_conversion_alpha_fading_enable_WIDTH 1

 alpha0:8, /*[7:0]  */
 alpha1:8, /*[15:8]  */
 fading_enable:1, /*[16:16]  */
 hole0:15;
 } bits;

 uint32_t value;
};

struct bvp_lib_colorspace_conversion {
 uint32_t bvp_lib_colorspace_conversion_mat00; /* +0x00000000  */
 uint32_t bvp_lib_colorspace_conversion_mat01; /* +0x00000004  */
 uint32_t bvp_lib_colorspace_conversion_mat02; /* +0x00000008  */
 uint32_t bvp_lib_colorspace_conversion_mat10; /* +0x0000000c  */
 uint32_t bvp_lib_colorspace_conversion_mat11; /* +0x00000010  */
 uint32_t bvp_lib_colorspace_conversion_mat12; /* +0x00000014  */
 uint32_t bvp_lib_colorspace_conversion_mat20; /* +0x00000018  */
 uint32_t bvp_lib_colorspace_conversion_mat21; /* +0x0000001c  */
 uint32_t bvp_lib_colorspace_conversion_mat22; /* +0x00000020  */
 uint32_t bvp_lib_colorspace_conversion_vec0; /* +0x00000024  */
 uint32_t bvp_lib_colorspace_conversion_vec1; /* +0x00000028  */
 uint32_t bvp_lib_colorspace_conversion_vec2; /* +0x0000002c  */
 union bvp_lib_colorspace_conversion_alphaReg bvp_lib_colorspace_conversion_alpha; /* +0x00000030  */
};
