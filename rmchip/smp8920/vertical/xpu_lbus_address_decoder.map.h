/* autogenerated with parsemap: do not edit. */
struct xpu_lbus_address_decoder_mem {
#define xpu_lbus_address_decoder_mem_local_rom_OFF 0x00000000
/* [0x00000000,0x00010000[ */ struct { struct local_rom_det d; uint32_t w[(0x00010000-sizeof(struct local_rom_det))/4]; } _local_rom;
#define xpu_lbus_address_decoder_mem_local_rom_reg_OFF 0x00010000
/* [0x00010000,0x00010004[ */ struct { struct local_rom_reg_det d; uint32_t w[(0x00000004-sizeof(struct local_rom_reg_det))/4]; } _local_rom_reg;
                              uint32_t pad0[1020/4];
#define xpu_lbus_address_decoder_mem_int_controller_OFF 0x00010400
/* [0x00010400,0x00010800[ */ struct { struct int_controller_det d; uint32_t w[(0x00000400-sizeof(struct int_controller_det))/4]; } _int_controller;
#define xpu_lbus_address_decoder_mem_timer_OFF 0x00010800
/* [0x00010800,0x00010810[ */ struct { struct timer_det d; uint32_t w[(0x00000010-sizeof(struct timer_det))/4]; } _timer;
                              uint32_t pad1[240/4];
#define xpu_lbus_address_decoder_mem_remap_OFF 0x00010900
/* [0x00010900,0x00010930[ */ struct { struct remap_det d; uint32_t w[(0x00000030-sizeof(struct remap_det))/4]; } _remap;
                              uint32_t pad2[208/4];
#define xpu_lbus_address_decoder_mem_misc_OFF 0x00010a00
/* [0x00010a00,0x00010a40[ */ struct { struct misc_det d; uint32_t w[(0x00000040-sizeof(struct misc_det))/4]; } _misc;
                              uint32_t pad3[192/4];
#define xpu_lbus_address_decoder_mem_mbus_OFF 0x00010b00
/* [0x00010b00,0x00010b40[ */ struct { struct mbus_det d; uint32_t w[(0x00000040-sizeof(struct mbus_det))/4]; } _mbus;
                              uint32_t pad4[192/4];
#define xpu_lbus_address_decoder_mem_crc32_spy_OFF 0x00010c00
/* [0x00010c00,0x00010c10[ */ struct { struct crc32_spy_det d; uint32_t w[(0x00000010-sizeof(struct crc32_spy_det))/4]; } _crc32_spy;
                              uint32_t pad5[240/4];
#define xpu_lbus_address_decoder_mem_cipher_des_OFF 0x00010d00
/* [0x00010d00,0x00010d30[ */ struct { struct cipher_des_det d; uint32_t w[(0x00000030-sizeof(struct cipher_des_det))/4]; } _cipher_des;
                              uint32_t pad6[268/4];
#define xpu_lbus_address_decoder_mem_cipher_rst_OFF 0x00010e3c
/* [0x00010e3c,0x00010e40[ */ struct { struct cipher_rst_det d; uint32_t w[(0x00000004-sizeof(struct cipher_rst_det))/4]; } _cipher_rst;
#define xpu_lbus_address_decoder_mem_cipher_rc4_OFF 0x00010e40
/* [0x00010e40,0x00010e80[ */ struct { struct cipher_rc4_det d; uint32_t w[(0x00000040-sizeof(struct cipher_rc4_det))/4]; } _cipher_rc4;
#define xpu_lbus_address_decoder_mem_cipher_aes_OFF 0x00010e80
/* [0x00010e80,0x00010f00[ */ struct { struct cipher_aes_det d; uint32_t w[(0x00000080-sizeof(struct cipher_aes_det))/4]; } _cipher_aes;
#define xpu_lbus_address_decoder_mem_cipher_sha_OFF 0x00010f00
/* [0x00010f00,0x00010f40[ */ struct { struct cipher_sha_det d; uint32_t w[(0x00000040-sizeof(struct cipher_sha_det))/4]; } _cipher_sha;
                              uint32_t pad7[192/4];
#define xpu_lbus_address_decoder_mem_keyladder_OFF 0x00011000
/* [0x00011000,0x00011020[ */ struct { struct keyladder_det d; uint32_t w[(0x00000020-sizeof(struct keyladder_det))/4]; } _keyladder;
};
